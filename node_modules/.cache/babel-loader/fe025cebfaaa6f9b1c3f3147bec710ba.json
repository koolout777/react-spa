{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nconst GRAPHQL_URI = process.env.REACT_APP_GRAPHQL_URI;\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('token');\n  const authorizationHeader = token ? `Bearer ${JSON.parse(token).access_token}` : null;\n  return {\n    headers: { ...headers,\n      authorization: authorizationHeader\n    }\n  };\n});\nconst httpLink = ApolloLink.from([onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) graphQLErrors.forEach(({\n    message,\n    locations,\n    path\n  }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n}), createUploadLink({\n  uri: GRAPHQL_URI,\n  fetchOptions: {\n    mode: 'cors'\n  }\n})]);\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"sources":["/Users/raffy/Documents/training/career-react-blog-graphgql/src/utils/apollo.js"],"names":["ApolloClient","InMemoryCache","setContext","onError","ApolloLink","createUploadLink","GRAPHQL_URI","process","env","REACT_APP_GRAPHQL_URI","authLink","_","headers","token","localStorage","getItem","authorizationHeader","JSON","parse","access_token","authorization","httpLink","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","fetchOptions","mode","client","link","concat","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAhC;AAEA,MAAMC,QAAQ,GAAGR,UAAU,CAAC,CAACS,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,mBAAmB,GAAGH,KAAK,GAAI,UAASI,IAAI,CAACC,KAAL,CAAWL,KAAX,EAAkBM,YAAa,EAA5C,GAAgD,IAAjF;AACA,SAAO;AACLP,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPQ,MAAAA,aAAa,EAAEJ;AAFR;AADJ,GAAP;AAMD,CAT0B,CAA3B;AAWA,MAAMK,QAAQ,GAAGjB,UAAU,CAACkB,IAAX,CAAgB,CAC/BnB,OAAO,CAAC,CAAC;AAAEoB,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC3C,MAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,GAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAKF,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,CARM,CADwB,EAU/BnB,gBAAgB,CAAC;AACf0B,EAAAA,GAAG,EAAEzB,WADU;AAEf0B,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM;AAFC,CAAD,CAVe,CAAhB,CAAjB;AAkBA,OAAO,MAAMC,MAAM,GAAG,IAAIlC,YAAJ,CAAiB;AACrCmC,EAAAA,IAAI,EAAEzB,QAAQ,CAAC0B,MAAT,CAAgBf,QAAhB,CAD+B;AAErCgB,EAAAA,KAAK,EAAE,IAAIpC,aAAJ;AAF8B,CAAjB,CAAf","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\n\nconst GRAPHQL_URI = process.env.REACT_APP_GRAPHQL_URI;\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token');\n  const authorizationHeader = token ? `Bearer ${JSON.parse(token).access_token}` : null\n  return {\n    headers: {\n      ...headers,\n      authorization: authorizationHeader,\n    }\n  }\n});\n\nconst httpLink = ApolloLink.from([\n  onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.forEach(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n        ),\n      );\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  }),\n  createUploadLink({\n    uri: GRAPHQL_URI,\n    fetchOptions: {\n      mode: 'cors',\n    },\n  }),\n]);\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n"]},"metadata":{},"sourceType":"module"}