{"ast":null,"code":"var _jsxFileName = \"/Users/raffy/Documents/training/react-spa/src/pages/PostForm.js\";\nimport React, { useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useUtils } from \"../hooks/useUtils.js\";\nimport { postDate } from \"../utils/helpers.js\";\nimport Breadcrumbs from \"../components/common/Breadcrumbs\";\nimport Modal from \"../components/Modal\";\n\nconst PostForm = () => {\n  const {\n    _scrollLock\n  } = useUtils();\n  const history = useHistory();\n  const [image, setImage] = useState(null);\n  const [formPost, setFormPost] = useState({\n    title: \"\",\n    published: false,\n    body: \"\",\n    userId: null\n  });\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isShowModal, setIsShowModal] = useState(false);\n  const formActionPage = \"Create New Post\";\n  const handleShowErrorTite = isTitleEmpty ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-form-title-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, \"Title must not be empty.\") : \"\";\n\n  const handleUpdateField = e => {\n    e.persist();\n    const {\n      id,\n      value\n    } = e.target;\n    setFormPost(prevState => {\n      return { ...prevState,\n        [e.target.id]: e.target.id === \"published\" ? e.target.checked : e.target.value\n      };\n    });\n\n    switch (id) {\n      case \"title\":\n        if (value) {\n          setIsTitleEmpty(false);\n        } else {\n          setIsTitleEmpty(true);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitPost = e => {\n    e.preventDefault();\n    console.log(\"save post\");\n  };\n\n  const handleCancelPost = e => {\n    e.preventDefault();\n    setIsShowModal(true);\n\n    _scrollLock(true);\n  };\n\n  const handleModalClose = () => {\n    _scrollLock(false);\n\n    setIsShowModal(false);\n  };\n\n  const handleModalOk = () => {\n    _scrollLock(false);\n\n    setIsShowModal(false);\n    history.push(\"/\");\n  };\n\n  const fileInput = useRef(null);\n\n  const handleClick = () => {\n    fileInput.current.click();\n  };\n\n  const ImgUpload = ({\n    onChange,\n    src\n  }) => {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      for: \"image-upload\",\n      className: \"post-form-image-label\",\n      onClick: () => handleClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \"UPLOAD IMAGE\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"photo-upload\",\n      type: \"file\",\n      ref: fileInput,\n      onChange: onChange,\n      style: {\n        \"display\": \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const photoUpload = e => {\n    e.preventDefault();\n    const reader = new FileReader();\n    const file = e.target.files[0];\n\n    reader.onloadend = () => {\n      setImage(reader.result);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"posts-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    onShow: isShowModal,\n    text: \"Discard Changes?\",\n    onClose: handleModalClose,\n    onOk: handleModalOk,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Breadcrumbs, {\n    currentPage: formActionPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"u-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"post-form-inner\",\n    onSubmit: handleSubmitPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-header post-form-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"post-action-list post-form-action-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"post-action-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"post-action-link post-form-action-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"Save Post\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"post-action-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCancelPost,\n    className: \"post-action-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, \"Cancel\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form-body-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"time\", {\n    dateTime: postDate(),\n    className: \"post-created\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, postDate()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form-published\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"published\",\n    name: \"published\",\n    className: \"post-form-published-checkbox\",\n    value: \"\",\n    defaultChecked: false,\n    onChange: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"published\",\n    className: \"post-form-published-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, \"Publish\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: isTitleEmpty || true ? \"post-form-title error\" : \"post-form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"title\",\n    className: \"post-form-title-textarea\",\n    placeholder: \"Title\",\n    onChange: handleUpdateField,\n    value: formPost.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  })), handleShowErrorTite, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form-image-wrapper\",\n    style: {\n      backgroundImage: `url(${image})`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ImgUpload, {\n    onChange: e => photoUpload(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form-text-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"body\",\n    placeholder: \"Content\",\n    className: \"post-form-content-textarea\",\n    onChange: handleUpdateField,\n    value: formPost.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, \"comment section here\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/raffy/Documents/training/react-spa/src/pages/PostForm.js"],"names":["React","useState","useRef","useHistory","useUtils","postDate","Breadcrumbs","Modal","PostForm","_scrollLock","history","image","setImage","formPost","setFormPost","title","published","body","userId","isTitleEmpty","setIsTitleEmpty","isShowModal","setIsShowModal","formActionPage","handleShowErrorTite","handleUpdateField","e","persist","id","value","target","prevState","checked","handleSubmitPost","preventDefault","console","log","handleCancelPost","handleModalClose","handleModalOk","push","fileInput","handleClick","current","click","ImgUpload","onChange","src","photoUpload","reader","FileReader","file","files","onloadend","result","readAsDataURL","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useUtils } from \"../hooks/useUtils.js\";\n\nimport { postDate } from \"../utils/helpers.js\";\n\nimport Breadcrumbs from \"../components/common/Breadcrumbs\";\nimport Modal from \"../components/Modal\";\n\nconst PostForm = () => {\n  const { _scrollLock } = useUtils();\n  const history = useHistory();\n\n  const [image, setImage] = useState(null);\n\n\n  const [formPost, setFormPost] = useState({\n    title: \"\",\n    published: false,\n    body: \"\",\n    userId: null,\n  });\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isShowModal, setIsShowModal] = useState(false);\n\n   const formActionPage = \"Create New Post\";\n\n  const handleShowErrorTite = isTitleEmpty ? (\n    <p className=\"post-form-title-error\">Title must not be empty.</p>\n  ) : (\n    \"\"\n  );\n\n  const handleUpdateField = (e) => {\n    e.persist();\n    const { id, value } = e.target;\n\n    setFormPost((prevState) => {\n      return {\n        ...prevState,\n        [e.target.id]:\n          e.target.id === \"published\" ? e.target.checked : e.target.value,\n      };\n    });\n\n    switch (id) {\n      case \"title\":\n        if (value) {\n          setIsTitleEmpty(false);\n        } else {\n          setIsTitleEmpty(true);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitPost = (e) => {\n    e.preventDefault();\n    console.log(\"save post\");\n  };\n\n  const handleCancelPost = (e) => {\n    e.preventDefault();\n    setIsShowModal(true);\n    _scrollLock(true);\n  };\n\n  const handleModalClose = () => {\n    _scrollLock(false);\n    setIsShowModal(false);\n  };\n\n  const handleModalOk = () => {\n    _scrollLock(false);\n    setIsShowModal(false);\n    history.push(\"/\");\n  };\n\n\n  const fileInput = useRef(null)\n\n  const handleClick = () => {\n    fileInput.current.click();\n  }\n\n\n  const ImgUpload =({\n    onChange,\n    src,\n  })=>{\n    return(\n      <label for=\"image-upload\"  className=\"post-form-image-label\" onClick={() => handleClick()}>\n          UPLOAD IMAGE\n        <input id=\"photo-upload\" type=\"file\" ref={fileInput}  onChange={onChange} style={{\"display\": \"none\"}}/>\n      </label>\n    );\n  }\n\n  const photoUpload = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    const file = e.target.files[0];\n    reader.onloadend = () => {\n      setImage(reader.result);\n    }\n\n    reader.readAsDataURL(file);\n  }\n\n  return (\n    <div className=\"posts-form\">\n      <Modal\n        onShow={isShowModal}\n        text=\"Discard Changes?\"\n        onClose={handleModalClose}\n        onOk={handleModalOk}\n      />\n      <Breadcrumbs currentPage={formActionPage} />\n\n      <div className=\"u-container\">\n        <form className=\"post-form-inner\" onSubmit={handleSubmitPost}>\n          <div className=\"post-header post-form-header\">\n            <ul className=\"post-action-list post-form-action-list\">\n              <li className=\"post-action-item\">\n                <button\n                  type=\"submit\"\n                  className=\"post-action-link post-form-action-button\"\n                >\n                  Save Post\n                </button>\n              </li>\n              <li className=\"post-action-item\">\n                <button onClick={handleCancelPost} className=\"post-action-link\">\n                  Cancel\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div className=\"post-body\">\n            <div className=\"post-form-body-top\">\n              <time dateTime={postDate()} className=\"post-created\">\n                {postDate()}\n              </time>\n              <div className=\"post-form-published\">\n                <input\n                  type=\"checkbox\"\n                  id=\"published\"\n                  name=\"published\"\n                  className=\"post-form-published-checkbox\"\n                  value=''\n                  defaultChecked={false}\n                  onChange=''\n                />\n                <label\n                  htmlFor=\"published\"\n                  className=\"post-form-published-label\"\n                >\n                  Publish\n                </label>\n              </div>\n            </div>\n            <div\n              className={\n                (isTitleEmpty || true ) ? \"post-form-title error\" : \"post-form-title\"\n              }\n            >\n              <textarea\n                id=\"title\"\n                className=\"post-form-title-textarea\"\n                placeholder=\"Title\"\n                onChange={handleUpdateField}\n                value={formPost.title}\n              />\n            </div>\n            {handleShowErrorTite}\n\n            <div\n              className=\"post-form-image-wrapper\"\n              style={{ backgroundImage: `url(${image})` }}\n            >\n\n              <ImgUpload onChange={(e)=> photoUpload(e)} />\n\n\n            </div>\n            <div className=\"post-form-text-content\">\n              <textarea\n                id=\"body\"\n                placeholder=\"Content\"\n                className=\"post-form-content-textarea\"\n                onChange={handleUpdateField}\n                value={formPost.body}\n              />\n            </div>\n          </div>\n        </form>\n        <div className=\"post-footer\">\n            comment section here\n        </div>\n        <br />\n      </div>\n    </div>\n  );\n};\n\nexport default PostForm;\n\n"]},"metadata":{},"sourceType":"module"}