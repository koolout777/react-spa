{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\n\nvar _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));\n\nvar _require = require('apollo-link'),\n    ApolloLink = _require.ApolloLink,\n    Observable = _require.Observable;\n\nvar _require2 = require('apollo-link-http-common'),\n    selectURI = _require2.selectURI,\n    selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n    fallbackHttpConfig = _require2.fallbackHttpConfig,\n    serializeFetchParameter = _require2.serializeFetchParameter,\n    createSignalIfSupported = _require2.createSignalIfSupported,\n    parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse;\n\nvar _require3 = require('extract-files'),\n    extractFiles = _require3.extractFiles,\n    isExtractableFile = _require3.isExtractableFile,\n    ReactNativeFile = _require3.ReactNativeFile;\n\nexports.ReactNativeFile = ReactNativeFile;\nexports.isExtractableFile = isExtractableFile;\n\nfunction formDataAppendFile(formData, fieldName, file) {\n  formData.append(fieldName, file, file.name);\n}\n\nexports.formDataAppendFile = formDataAppendFile;\n\nexports.createUploadLink = function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$uri = _ref.uri,\n      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n      _ref$isExtractableFil = _ref.isExtractableFile,\n      customIsExtractableFile = _ref$isExtractableFil === void 0 ? isExtractableFile : _ref$isExtractableFil,\n      CustomFormData = _ref.FormData,\n      _ref$formDataAppendFi = _ref.formDataAppendFile,\n      customFormDataAppendFile = _ref$formDataAppendFi === void 0 ? formDataAppendFile : _ref$formDataAppendFi,\n      customFetch = _ref.fetch,\n      fetchOptions = _ref.fetchOptions,\n      credentials = _ref.credentials,\n      headers = _ref.headers,\n      includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  };\n  return new ApolloLink(function (operation) {\n    var uri = selectURI(operation, fetchUri);\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren = _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n        version = _context$clientAwaren.version,\n        headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)({}, name && {\n        'apollographql-client-name': name\n      }, {}, version && {\n        'apollographql-client-version': version\n      }, {}, headers)\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _selectHttpOptionsAnd.options,\n        body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body, '', customIsExtractableFile),\n        clone = _extractFiles.clone,\n        files = _extractFiles.files;\n\n    var payload = serializeFetchParameter(clone, 'Payload');\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var RuntimeFormData = CustomFormData || FormData;\n      var form = new RuntimeFormData();\n      form.append('operations', payload);\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        customFormDataAppendFile(form, ++i, file);\n      });\n      options.body = form;\n    } else options.body = payload;\n\n    return new Observable(function (observer) {\n      var abortController;\n\n      if (!options.signal) {\n        var _createSignalIfSuppor = createSignalIfSupported(),\n            controller = _createSignalIfSuppor.controller;\n\n        if (controller) {\n          abortController = controller;\n          options.signal = abortController.signal;\n        }\n      }\n\n      var runtimeFetch = customFetch || fetch;\n      runtimeFetch(uri, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n      }).catch(function (error) {\n        if (error.name === 'AbortError') return;\n        if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n        observer.error(error);\n      });\n      return function () {\n        if (abortController) abortController.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["/Users/raffy/Documents/training/react-spa/node_modules/apollo-upload-client/lib/index.js"],"names":["_interopRequireDefault","require","_extends2","_require","ApolloLink","Observable","_require2","selectURI","selectHttpOptionsAndBody","fallbackHttpConfig","serializeFetchParameter","createSignalIfSupported","parseAndCheckHttpResponse","_require3","extractFiles","isExtractableFile","ReactNativeFile","exports","formDataAppendFile","formData","fieldName","file","append","name","createUploadLink","_temp","_ref","_ref$uri","uri","fetchUri","_ref$isExtractableFil","customIsExtractableFile","CustomFormData","FormData","_ref$formDataAppendFi","customFormDataAppendFile","customFetch","fetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","_context$clientAwaren","clientAwareness","version","contextConfig","default","_selectHttpOptionsAnd","body","_extractFiles","clone","files","payload","size","RuntimeFormData","form","map","i","forEach","paths","JSON","stringify","observer","abortController","signal","_createSignalIfSuppor","controller","runtimeFetch","then","response","setContext","result","next","complete","catch","error","errors","data","abort"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\n\nvar _extends2 = _interopRequireDefault(\n  require('@babel/runtime/helpers/extends')\n);\n\nvar _require = require('apollo-link'),\n  ApolloLink = _require.ApolloLink,\n  Observable = _require.Observable;\n\nvar _require2 = require('apollo-link-http-common'),\n  selectURI = _require2.selectURI,\n  selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n  fallbackHttpConfig = _require2.fallbackHttpConfig,\n  serializeFetchParameter = _require2.serializeFetchParameter,\n  createSignalIfSupported = _require2.createSignalIfSupported,\n  parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse;\n\nvar _require3 = require('extract-files'),\n  extractFiles = _require3.extractFiles,\n  isExtractableFile = _require3.isExtractableFile,\n  ReactNativeFile = _require3.ReactNativeFile;\n\nexports.ReactNativeFile = ReactNativeFile;\nexports.isExtractableFile = isExtractableFile;\n\nfunction formDataAppendFile(formData, fieldName, file) {\n  formData.append(fieldName, file, file.name);\n}\n\nexports.formDataAppendFile = formDataAppendFile;\n\nexports.createUploadLink = function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$uri = _ref.uri,\n    fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n    _ref$isExtractableFil = _ref.isExtractableFile,\n    customIsExtractableFile =\n      _ref$isExtractableFil === void 0\n        ? isExtractableFile\n        : _ref$isExtractableFil,\n    CustomFormData = _ref.FormData,\n    _ref$formDataAppendFi = _ref.formDataAppendFile,\n    customFormDataAppendFile =\n      _ref$formDataAppendFi === void 0\n        ? formDataAppendFile\n        : _ref$formDataAppendFi,\n    customFetch = _ref.fetch,\n    fetchOptions = _ref.fetchOptions,\n    credentials = _ref.credentials,\n    headers = _ref.headers,\n    includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers,\n  };\n  return new ApolloLink(function (operation) {\n    var uri = selectURI(operation, fetchUri);\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren =\n      _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n      version = _context$clientAwaren.version,\n      headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)(\n        {},\n        name && {\n          'apollographql-client-name': name,\n        },\n        {},\n        version && {\n          'apollographql-client-version': version,\n        },\n        {},\n        headers\n      ),\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(\n        operation,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      ),\n      options = _selectHttpOptionsAnd.options,\n      body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body, '', customIsExtractableFile),\n      clone = _extractFiles.clone,\n      files = _extractFiles.files;\n\n    var payload = serializeFetchParameter(clone, 'Payload');\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var RuntimeFormData = CustomFormData || FormData;\n      var form = new RuntimeFormData();\n      form.append('operations', payload);\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        customFormDataAppendFile(form, ++i, file);\n      });\n      options.body = form;\n    } else options.body = payload;\n\n    return new Observable(function (observer) {\n      var abortController;\n\n      if (!options.signal) {\n        var _createSignalIfSuppor = createSignalIfSupported(),\n          controller = _createSignalIfSuppor.controller;\n\n        if (controller) {\n          abortController = controller;\n          options.signal = abortController.signal;\n        }\n      }\n\n      var runtimeFetch = customFetch || fetch;\n      runtimeFetch(uri, options)\n        .then(function (response) {\n          operation.setContext({\n            response: response,\n          });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(function (result) {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch(function (error) {\n          if (error.name === 'AbortError') return;\n          if (error.result && error.result.errors && error.result.data)\n            observer.next(error.result);\n          observer.error(error);\n        });\n      return function () {\n        if (abortController) abortController.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}